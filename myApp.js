"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./config");
var parseString = require("xml2js");
var readTextFile = require("read-text-file");
var _ = require("lodash");
var d3Format = require("d3-format");
var d3Dsv = require("d3-dsv");
var fs = require("fs");
var formatter3 = d3Format.format('.3f');
var formatter1 = d3Format.format('.1f');
var PresupuestoAnual = (function () {
    function PresupuestoAnual(xml) {
        var _this = this;
        parseString.parseString(xml, function (err, result) {
            _this.pptoCabecera = result.matriz.cabecera;
            _this.pptoCuerpo = result.matriz.cuerpo;
        });
        this.processCuerpo();
        this.itemsCodigosInstituciones = this.processCabecera();
        this.diccionarioInstituciones = this.buildDiccionarioPartidaCapituloPrograma(this.itemsCodigosInstituciones);
        this.periodo = this.buscarPerido();
        this.addNombresYAño();
    }
    PresupuestoAnual.prototype.processCuerpo = function () {
        this.itemsPresupuesto = _.map(this.pptoCuerpo, function (d) {
            return {
                codPartida: d['CodInstit'][0].substring(0, 2),
                codCapitulo: null,
                codPrograma: null,
                partida: null,
                capitulo: null,
                programa: null,
                asigna: d['asigna'][0],
                codInstit: d['CodInstit'][0],
                item: d['item'][0],
                moneda: d['Moneda'][0],
                montoDolar: d['monto_dolar'][0],
                montoPesos: d['monto_pesos'][0],
                nombreNuevo: d['nombre_nuevo'][0].trim(),
                nSecuencial: d['Nsecuencial'][0],
                numGlosa: d['Num_Glosa'][0],
                subti: d['subti[0]'],
                tipoMov: d['t_tipo_mov[0]'],
                periodo: null,
                nombre: null
            };
        });
    };
    /**
     * Cada item de la cabecera incluye el periodo
     *
     * Vamos a verificar que exista sólo uno y lo almacenamos, de lo contrario retornamos el valor -9999
     *
     * @memberof PresupuestoAnual
     */
    PresupuestoAnual.prototype.buscarPerido = function () {
        var periodos = new Set();
        var periodo = null; // Default
        _.each(this.itemsCodigosInstituciones, function (d) {
            periodos.add(d.periodo);
        });
        if (periodos.size === 1) {
            periodo = +periodos.values().next().value;
        }
        return periodo;
    };
    PresupuestoAnual.prototype.processCabecera = function () {
        // console.dir(result);
        var itemsCodigos = _.map(this.pptoCabecera, function (d) {
            var nombre = d['nombre'][0].trim();
            var periodo = d['periodo'][0];
            var partida = d['partida'][0];
            var capitulo = d['capitulo'][0];
            var programa = d['programa'][0];
            var glosa_Programa = d['glosa_Programa'][0];
            var moneda = d['moneda[0]'];
            var record = {
                nombre: nombre,
                periodo: periodo,
                partida: partida,
                capitulo: capitulo,
                programa: programa,
                glosa_Programa: glosa_Programa,
                moneda: moneda
            };
            return record;
        });
        return itemsCodigos;
    };
    PresupuestoAnual.prototype.buildDiccionarioPartidaCapituloPrograma = function (itemsCodigosInstituciones) {
        var diccionario = {};
        // Agrupamos los códigos por partida
        var partidas = _.groupBy(itemsCodigosInstituciones, function (d) {
            return d.partida;
        });
        _.each(partidas, function (items, partida) {
            // Agrupamos los items de cada partida por capítulo
            var capitulos = _.groupBy(items, function (d) {
                return d.capitulo;
            });
            _.each(capitulos, function (items2, capitulo) {
                // Agrupamos los items de cada caspitulo por programas
                var programas = _.groupBy(items2, function (d) {
                    return d.programa;
                });
                _.each(programas, function (items3, programa) {
                    // Si el item tiene capitulo 00 & programa 00, el nombre corresponde a la partida
                    // Si el item tiene programa 00, el nombre corresponde al capitulo
                    // En si capitulo & programa tienen valores, el nombre corresponde al programa
                    _.each(items3, function (d) {
                        // Partida
                        if (capitulo == '00' && programa == '00') {
                            diccionario[partida] = diccionario[partida] || { nombre: '', capitulos: {} };
                            diccionario[partida].nombre = d.nombre;
                            // Capitulo
                        }
                        else if (programa == '00') {
                            diccionario[partida] = diccionario[partida] || { nombre: '', capitulos: {} };
                            diccionario[partida].capitulos[capitulo] = diccionario[partida].capitulos[capitulo] || { nombre: '', programas: {} };
                            diccionario[partida].capitulos[capitulo].nombre = d.nombre;
                            // Programa
                        }
                        else {
                            diccionario[partida] = diccionario[partida] || { nombre: '', capitulos: {} };
                            diccionario[partida].capitulos[capitulo] = diccionario[partida].capitulos[capitulo] || { nombre: '', programas: {} };
                            diccionario[partida].capitulos[capitulo].programas[programa] =
                                diccionario[partida].capitulos[capitulo].programas[programa] || { nombre: '' };
                            diccionario[partida].capitulos[capitulo].programas[programa].nombre = d.nombre;
                        }
                        //console.log(d.partida, d.capitulo, d.programa, d.nombre);
                    });
                });
            });
        });
        return diccionario;
    };
    PresupuestoAnual.prototype.addNombresYAño = function () {
        var _this = this;
        var itemsPpto = _.groupBy(this.itemsPresupuesto, function (d) {
            return d.codInstit;
        });
        _.each(itemsPpto, function (items, codInstit) {
            var codPartida = codInstit.substring(0, 2);
            var codCapitulo = codInstit.substring(2, 4);
            var codPrograma = codInstit.substring(4, 6);
            var partida = _this.diccionarioInstituciones[codPartida];
            var capitulo = partida.capitulos[codCapitulo];
            var programa = capitulo.programas[codPrograma];
            _.each(items, function (d) {
                d.codPartida = codPartida;
                d.codCapitulo = codCapitulo;
                d.codPrograma = codPrograma;
                d.partida = partida.nombre;
                d.capitulo = capitulo.nombre;
                d.programa = programa.nombre;
                d.periodo = _this.periodo;
            });
        });
    };
    PresupuestoAnual.prototype.tsvFormatted = function () {
        return d3Dsv.tsvFormat(this.itemsPresupuesto);
    };
    return PresupuestoAnual;
}());
var PresupuestoHistorico = (function () {
    function PresupuestoHistorico() {
        this.records = [];
    }
    PresupuestoHistorico.prototype.addTSV = function (tsv) {
        var newrecords = d3Dsv.tsvParse(tsv);
        this.records = this.records.concat(newrecords);
    };
    PresupuestoHistorico.prototype.tsvFormatted = function () {
        var tsv = d3Dsv.tsvFormat(this.records);
        return tsv;
    };
    PresupuestoHistorico.prototype.normaliseNames = function () {
        var _this = this;
        var maxPeriod = _.maxBy(this.records, function (d) { return d.periodo; }).periodo;
        var itemsMaxPeriod = _.filter(this.records, function (d) { return d.periodo == maxPeriod; });
        this.dictionary = new DiccionarioProgramas();
        this.dictionary.buildDictionary(itemsMaxPeriod);
        _.each(this.records, function (d, i) {
            console.log('normalise', Math.floor(100 * i / _this.records.length));
            d.partida = _this.dictionary.getPartida(d.codPartida);
        });
    };
    return PresupuestoHistorico;
}());
var DiccionarioProgramas = (function () {
    function DiccionarioProgramas() {
        this.dictionary = {};
    }
    DiccionarioProgramas.prototype.buildDictionary = function (items) {
        var _this = this;
        var itemsByPartida = _.groupBy(items, function (d) { return d.codPartida; });
        _.each(itemsByPartida, function (itemsCapitulo, codPartida) {
            _this.dictionary[codPartida] = _this.dictionary[codPartida] || { nombre: _.first(itemsCapitulo).partida, capitulos: {} };
            var itemsByCapitulo = _.groupBy(itemsCapitulo, function (d) { return d.codCapitulo; });
            _.each(itemsByCapitulo, function (itemsPrograma, codCapitulo) {
                _this.dictionary[codPartida][codCapitulo] = _this.dictionary[codPartida][codCapitulo] || { nombre: _.first(itemsPrograma).capitulo, programas: {} };
                var itemsByPrograma = _.groupBy(itemsPrograma, function (d) { return d.codPrograma; });
                _.each(itemsByPrograma, function (itemsAsignacion, codPrograma) {
                    _this.dictionary[codPartida][codCapitulo][codPrograma] = _this.dictionary[codPartida][codCapitulo][codPrograma] || { nombre: _.first(itemsAsignacion).programa };
                });
            });
        });
    };
    DiccionarioProgramas.prototype.getPartida = function (codPartida) {
        return this.dictionary[codPartida] && this.dictionary[codPartida].nombre;
    };
    return DiccionarioProgramas;
}());
var presupuestoHistorico = new PresupuestoHistorico();
var presupuestoAllYears = '';
_.each(config_1.xmlFiles, function (d, i) {
    console.log(d.periodo);
    var xml = readTextFile.readSync(d.url);
    var presupuesto = new PresupuestoAnual(xml);
    var presupuestoTsv = presupuesto.tsvFormatted();
    fs.writeFile(config_1.outDir + "/presupuesto_" + d.periodo + ".txt", presupuestoTsv, function (err) { console.log(err ? 'Error :' + err : "ok " + d.periodo + ".txt"); });
    presupuestoHistorico.addTSV(presupuestoTsv);
});
presupuestoHistorico.normaliseNames();
fs.writeFile(config_1.outDir + "/presupuesto_allYears.txt", presupuestoHistorico.tsvFormatted(), function (err) { console.log(err ? 'Error :' + err : "ok AllYears.txt"); });

//# sourceMappingURL=data:application/json;charset=utf8;base64,
